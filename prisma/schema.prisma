generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String    @db.Uuid
  date        DateTime  @db.Timestamp(6)
  check_in    DateTime  @db.Timestamp(6)
  check_out   DateTime? @db.Timestamp(6)
  total_hours Int
  status      String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?      @db.VarChar(255)
  address      String?      @db.VarChar(255)
  phone_number String?      @db.VarChar(20)
  website      String?      @db.VarChar(255)
  name         String       @db.VarChar(255)
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  user_id      String       @db.Uuid
  tenant_id    String       @db.VarChar(255)
  user         user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department   department[]
}

model department {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar(255)
  company_id   String         @db.Uuid
  description  String?        @db.VarChar(255)
  location     String         @db.VarChar(255)
  phone_number String?        @db.VarChar(20)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  company      company        @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_position job_position[]
}

model employee {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  job_position_id String       @db.Uuid
  start_date      DateTime     @db.Timestamp(6)
  end_date        DateTime?    @db.Timestamp(6)
  salary          Int
  status          String       @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  attendance      attendance[]
  job_position    job_position @relation(fields: [job_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_position {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  department_id String     @db.Uuid
  description   String?    @db.VarChar(255)
  salary        Int
  requirements  String     @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  employee      employee[]
  department    department @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  employee    employee[]
}
